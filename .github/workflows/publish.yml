name: Publish to NPM

on:
  release:
    types: [published]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-platform-binaries:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux-x64-gnu
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            platform: win32-x64-msvc
          - host: macos-13
            target: x86_64-apple-darwin
            platform: darwin-x64
          - host: macos-14
            target: aarch64-apple-darwin
            platform: darwin-arm64

    name: Build ${{ matrix.settings.platform }}
    runs-on: ${{ matrix.settings.host }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.settings.target }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            rust-core/target
          key: ${{ runner.os }}-${{ matrix.settings.target }}-cargo-${{ hashFiles('rust-core/Cargo.lock') }}

      - name: Validate Rust code (Linux only)
        if: matrix.settings.host == 'ubuntu-latest'
        working-directory: rust-core
        run: |
          source ~/.cargo/env 2>/dev/null || true
          cargo fmt --check
          cargo clippy --all-targets --all-features -- -D warnings
          cargo test --verbose

      - name: Build NAPI module
        working-directory: rust-core
        shell: bash
        run: |
          source ~/.cargo/env 2>/dev/null || true
          npm install
          npx napi build --release --platform --target ${{ matrix.settings.target }}

      - name: Create and publish platform package
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Get version from package.json
          VERSION=$(node -p "require('./node-wrapper/package.json').version")
          PLATFORM="${{ matrix.settings.platform }}"
          PACKAGE_NAME="solopdf-cli-$PLATFORM"

          echo "Building platform package: $PACKAGE_NAME v$VERSION"

          # Create platform package directory
          mkdir -p "platform-packages/$PACKAGE_NAME"
          cd "platform-packages/$PACKAGE_NAME"

          # Create package.json
          node -e "
          const pkg = {
            name: '$PACKAGE_NAME',
            version: '$VERSION',
            description: 'SoloPDF CLI native binary for $PLATFORM',
            main: 'index.node',
            files: ['index.node'],
            license: 'ISC',
            repository: {
              type: 'git',
              url: 'git+https://github.com/soloflow-ai/solopdf-cli.git'
            },
            publishConfig: {
              access: 'public'
            },
            engines: {
              node: '>=18.0.0'
            }
          };

          // Add platform-specific metadata
          switch ('$PLATFORM') {
            case 'win32-x64-msvc':
              pkg.cpu = ['x64'];
              pkg.os = ['win32'];
              break;
            case 'linux-x64-gnu':
              pkg.cpu = ['x64'];
              pkg.os = ['linux'];
              break;
            case 'darwin-x64':
              pkg.cpu = ['x64'];
              pkg.os = ['darwin'];
              break;
            case 'darwin-arm64':
              pkg.cpu = ['arm64'];
              pkg.os = ['darwin'];
              break;
          }

          require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "

          # Find and copy the binary
          NODE_FILE=\$(find \"../../rust-core\" -name \"*\${PLATFORM}.node\" -o -name \"index.node\" | head -1)
          if [ -n \"\$NODE_FILE\" ] && [ -f \"\$NODE_FILE\" ]; then
            cp \"\$NODE_FILE\" index.node
            SIZE=\$(stat -c%s index.node 2>/dev/null || stat -f%z index.node)
            echo \"✅ Copied binary: \$(basename \"\$NODE_FILE\") (\$SIZE bytes)\"
            
            # Only publish if binary is substantial (>1MB)
            if [ \"\$SIZE\" -gt 1000000 ]; then
              echo \"📦 Publishing \$PACKAGE_NAME...\"
              npm publish
              echo \"✅ Published \$PACKAGE_NAME v\$VERSION\"
            else
              echo \"⚠️  Binary too small, skipping publish: \$SIZE bytes\"
            fi
          else
            echo \"❌ No binary found for \$PLATFORM\"
            exit 1
          fi

      - name: Upload platform artifacts
        uses: actions/upload-artifact@v4
        with:
          name: platform-${{ matrix.settings.platform }}
          path: platform-packages/solopdf-cli-${{ matrix.settings.platform }}/

  publish-main-package:
    needs: build-platform-binaries
    runs-on: ubuntu-latest
    name: Publish Main Package

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
          cache-dependency-path: "node-wrapper/pnpm-lock.yaml"
          registry-url: "https://registry.npmjs.org"

      - name: Download platform artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Setup platform binaries for main package
        run: |
          # Create rust-core directory
          mkdir -p rust-core

          # Copy platform-specific binaries from artifacts
          echo "Available artifacts:"
          ls -la artifacts/ || echo "No artifacts found"

          for platform in linux-x64-gnu win32-x64-msvc darwin-x64 darwin-arm64; do
            ARTIFACT_DIR="artifacts/platform-$platform"
            if [ -d "$ARTIFACT_DIR" ]; then
              echo "Processing $platform..."
              ls -la "$ARTIFACT_DIR/"
              
              if [ -f "$ARTIFACT_DIR/index.node" ]; then
                cp "$ARTIFACT_DIR/index.node" "rust-core/index.$platform.node"
                SIZE=$(stat -c%s "rust-core/index.$platform.node" 2>/dev/null || stat -f%z "rust-core/index.$platform.node")
                echo "✅ Copied $platform binary ($SIZE bytes)"
              fi
            else
              echo "⚠️  Artifact not found for $platform"
            fi
          done

          # Use Linux binary as the generic fallback
          if [ -f "rust-core/index.linux-x64-gnu.node" ]; then
            cp "rust-core/index.linux-x64-gnu.node" "rust-core/index.node"
            echo "✅ Linux binary set as generic fallback"
          fi

          # Create the JavaScript wrapper
          cat > rust-core/index.js << 'EOF'
          const { createRequire } = require('module');

          function getPlatform() {
            const { platform, arch } = process;
            switch (platform) {
              case 'win32':
                return arch === 'x64' ? 'win32-x64-msvc' : `win32-${arch}`;
              case 'darwin':
                return arch === 'arm64' ? 'darwin-arm64' : 'darwin-x64';
              case 'linux':
                return arch === 'x64' ? 'linux-x64-gnu' : `linux-${arch}`;
              default:
                throw new Error(`Unsupported platform: ${platform}-${arch}`);
            }
          }

          const platformName = getPlatform();
          const require = createRequire(import.meta.url);

          try {
            module.exports = require(`./index.${platformName}.node`);
          } catch (e) {
            try {
              module.exports = require('./index.node');
            } catch (fallbackError) {
              throw new Error(`Failed to load native binary for ${platformName}: ${fallbackError.message}`);
            }
          }
          EOF

          cat > rust-core/index.d.ts << 'EOF'
          export interface SigningOptions {
            fontSize?: number;
            color?: string;
            xPosition?: number;
            yPosition?: number;
            pages?: number[];
            position?: string;
            rotation?: number;
            opacity?: number;
          }

          export declare function getPageCount(filePath: string): number;
          export declare function signPdfWithOptions(inputPath: string, outputPath: string, signatureText: string, options?: SigningOptions): void;
          export declare function getPdfInfoBeforeSigning(filePath: string): any;
          export declare function getPdfChecksum(filePath: string): string;
          export declare function generateSigningKeyPair(): string;
          export declare function getKeyInfoFromJson(keyData: string): any;
          export declare function signPdfWithKey(inputPath: string, outputPath: string, keyData: string, reason?: string, location?: string, contactInfo?: string): void;
          export declare function verifyPdfSignature(filePath: string): any;
          EOF

      - name: Install dependencies and build
        working-directory: node-wrapper
        run: |
          pnpm install --no-frozen-lockfile
          pnpm lint
          pnpm test
          pnpm run build:ci

      - name: Publish main package
        working-directory: node-wrapper
        run: pnpm publish --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
