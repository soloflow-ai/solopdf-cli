name: SoloPDF CI

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-binaries:
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: win32-x64-msvc
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-x64-gnu
          - target: x86_64-apple-darwin
            os: macos-latest
            name: darwin-x64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: darwin-arm64

    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: ${{ matrix.target }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          # Use ARM64 Node.js for ARM64 builds
          architecture: ${{ matrix.target == 'aarch64-apple-darwin' && 'arm64' || 'x64' }}

      - name: Set macOS deployment target
        if: matrix.os == 'macos-latest'
        run: |
          if [ "${{ matrix.target }}" = "aarch64-apple-darwin" ]; then
            echo "MACOSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV
          else
            echo "MACOSX_DEPLOYMENT_TARGET=10.12" >> $GITHUB_ENV
          fi

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            rust-core/target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('rust-core/Cargo.lock') }}

      - name: Validate Rust code (Linux only)
        if: matrix.os == 'ubuntu-latest'
        working-directory: rust-core
        run: |
          cargo fmt --check
          cargo clippy --all-targets --all-features -- -D warnings
          cargo test --verbose

      - name: Configure build environment (macOS ARM64)
        if: matrix.target == 'aarch64-apple-darwin'
        run: |
          # Ensure we're using the correct toolchain
          echo "CC=$(xcrun -f clang)" >> $GITHUB_ENV
          echo "CXX=$(xcrun -f clang++)" >> $GITHUB_ENV
          echo "AR=$(xcrun -f ar)" >> $GITHUB_ENV
          echo "STRIP=$(xcrun -f strip)" >> $GITHUB_ENV
          
          # Set target-specific environment variables for ring and other native deps
          echo "TARGET_CC=clang" >> $GITHUB_ENV
          echo "TARGET_CXX=clang++" >> $GITHUB_ENV
          echo "TARGET_AR=ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_APPLE_DARWIN_LINKER=clang" >> $GITHUB_ENV
          
          # Configure npm for ARM64 native modules
          npm config set target_arch arm64
          npm config set target_platform darwin
          npm config set build_from_source true
          
          # Verify Node.js architecture
          echo "Node.js architecture: $(node -p process.arch)"
          echo "Xcode version: $(xcodebuild -version || echo 'No Xcode')"

      - name: Build NAPI module
        working-directory: rust-core
        run: |
          npm install
          # Clear any previous builds to ensure clean state
          rm -rf target/aarch64-apple-darwin target/x86_64-apple-darwin target/x86_64-pc-windows-msvc target/x86_64-unknown-linux-gnu 2>/dev/null || true
          npx napi build --release --target ${{ matrix.target }}

      - name: Verify build output
        working-directory: rust-core
        run: |
          echo "Checking build artifacts..."
          ls -la index.node index.js index.d.ts
          file index.node
          
          # For macOS, check the architecture
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            echo "Binary architecture info:"
            if command -v lipo >/dev/null 2>&1; then
              lipo -info index.node
            else
              echo "lipo not available, using otool instead"
              otool -L index.node || echo "Could not determine architecture"
            fi
          fi

      - name: Generate test PDFs (Linux only)
        if: matrix.os == 'ubuntu-latest'
        working-directory: rust-core
        run: |
          mkdir -p ../executed/generated-pdfs
          cargo run --bin generate_test_pdfs -- ../executed/generated-pdfs

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.name }}
          path: |
            rust-core/index.node
            rust-core/index.js
            rust-core/index.d.ts

  node-wrapper:
    runs-on: ubuntu-latest
    name: Build and Test Node Wrapper
    needs: build-binaries

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: "10.13.1"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "pnpm"
          cache-dependency-path: "node-wrapper/pnpm-lock.yaml"

      - name: Download Linux binary
        uses: actions/download-artifact@v4
        with:
          name: binary-linux-x64-gnu
          path: rust-core/

      - name: Setup and test
        run: |
          node scripts/setup-execution-env.mjs
          cd node-wrapper
          pnpm install --frozen-lockfile
          pnpm lint
          pnpm test
          pnpm build

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: node-wrapper/coverage
          flags: node-tests
