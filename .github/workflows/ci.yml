name: SoloPDF CI

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]

env:
  CARGO_TERM_COLOR: always

jobs:
  rust-core:
    runs-on: ubuntu-latest
    name: Build and Test Rust Core

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Setup Node.js (for NAPI)
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            rust-core/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('rust-core/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check Rust formatting
        working-directory: rust-core
        run: cargo fmt --all -- --check

      - name: Run Clippy
        working-directory: rust-core
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check Rust code
        working-directory: rust-core
        run: cargo check

      - name: Run Rust unit tests
        working-directory: rust-core
        run: cargo test --verbose

      - name: Run Rust integration tests with sample PDFs
        working-directory: rust-core
        run: cargo test integration_tests --verbose

      - name: Build NAPI addon (debug)
        working-directory: rust-core
        run: cargo build

      - name: Build NAPI addon (release)
        working-directory: rust-core
        run: cargo build --release

      - name: Build NAPI module
        working-directory: rust-core
        run: npx napi build --release

      - name: Generate test PDFs
        working-directory: rust-core
        run: |
          mkdir -p ../executed/generated-pdfs
          cargo run --bin generate_test_pdfs -- ../executed/generated-pdfs

      - name: Upload Rust build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rust-core-build
          path: |
            rust-core/target/release/librust_core.so
            rust-core/target/release/rust_core.node
            rust-core/index.node
            rust-core/index.js
          if-no-files-found: ignore

      - name: Upload generated PDFs
        uses: actions/upload-artifact@v4
        with:
          name: generated-test-pdfs
          path: executed/generated-pdfs/
          retention-days: 7

  node-wrapper:
    runs-on: ubuntu-latest
    name: Build and Test Node Wrapper
    needs: rust-core

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: "10.13.1"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "pnpm"
          cache-dependency-path: "node-wrapper/pnpm-lock.yaml"

      - name: Install Node.js dependencies
        working-directory: node-wrapper
        run: pnpm install --frozen-lockfile

      - name: Download Rust artifacts
        uses: actions/download-artifact@v4
        with:
          name: rust-core-build
          path: rust-core/

      - name: Setup test environment
        run: node scripts/setup-execution-env.mjs

      - name: Run linter
        working-directory: node-wrapper
        run: pnpm lint

      - name: Run unit tests
        working-directory: node-wrapper
        run: pnpm test:unit

      - name: Run integration tests
        working-directory: node-wrapper
        run: pnpm test:integration

      - name: Run CLI tests
        working-directory: node-wrapper
        run: pnpm test:cli

      - name: Run tests with coverage
        working-directory: node-wrapper
        run: pnpm test:coverage

      - name: Build TypeScript
        working-directory: node-wrapper
        run: pnpm build

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: node-wrapper/coverage
          flags: node-tests
          name: node-coverage

      - name: Upload Node.js build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: node-wrapper-build
          path: node-wrapper/dist/

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: node-test-results
          path: |
            node-wrapper/coverage/
            node-wrapper/jest-results.xml
          retention-days: 7

  integration-test:
    runs-on: ubuntu-latest
    name: Integration Test
    needs: [rust-core, node-wrapper]
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      - name: Download Rust artifacts
        uses: actions/download-artifact@v4
        with:
          name: rust-core-build
          path: rust-core/

      - name: Download Node.js artifacts
        uses: actions/download-artifact@v4
        with:
          name: node-wrapper-build
          path: node-wrapper/dist/

      - name: Verify artifacts exist
        run: |
          echo "Checking Rust artifacts:"
          find rust-core/ -name "*.node" -o -name "*.so" || echo "No Rust artifacts found"
          echo "Checking Node.js artifacts:"
          find node-wrapper/dist/ -type f || echo "No Node.js artifacts found"
