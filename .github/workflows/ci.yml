name: SoloPDF CI

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-binaries:
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: win32-x64-msvc
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-x64-gnu
          - target: x86_64-apple-darwin
            os: macos-13
            name: darwin-x64
          - target: aarch64-apple-darwin
            os: macos-14
            name: darwin-arm64

    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: ${{ matrix.target }}

      - name: Verify Rust setup
        run: |
          echo "=== Rust Setup Verification ==="
          rustc --version
          cargo --version
          rustup show
          echo "Installed targets:"
          rustup target list --installed
          echo "Default host: $(rustc -vV | grep host | cut -d' ' -f2)"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          # For ARM64 macOS, ensure we get the right architecture
          architecture: ${{ matrix.os == 'macos-14' && 'arm64' || 'x64' }}

      - name: Setup environment for ARM64 macOS
        if: matrix.os == 'macos-14' && matrix.target == 'aarch64-apple-darwin'
        run: |
          echo "=== Setting up ARM64 macOS environment ==="
          # Set specific environment variables for ARM64 NAPI builds
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix)/include" >> $GITHUB_ENV
          echo "LDFLAGS=-L$(brew --prefix)/lib" >> $GITHUB_ENV
          
          # Ensure we're building for the correct architecture
          echo "CARGO_TARGET_AARCH64_APPLE_DARWIN_LINKER=clang" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_APPLE_DARWIN_RUSTFLAGS=-C link-arg=-undefined -C link-arg=dynamic_lookup" >> $GITHUB_ENV

      - name: Debug environment (macOS only)
        if: startsWith(matrix.os, 'macos')
        run: |
          echo "=== Environment Debug ==="
          echo "macOS version: $(sw_vers -productVersion)"
          echo "Architecture: $(uname -m)"
          echo "Node.js version: $(node --version)"
          echo "Node.js architecture: $(node -p 'process.arch')"
          echo "Target: ${{ matrix.target }}"
          echo "Runner OS: ${{ matrix.os }}"
          if command -v rustc >/dev/null 2>&1; then
            echo "Rust version: $(rustc --version)"
            echo "Rust targets: $(rustup target list --installed)"
          fi

      - name: Set macOS deployment target
        if: startsWith(matrix.os, 'macos')
        run: |
          if [ "${{ matrix.target }}" = "aarch64-apple-darwin" ]; then
            echo "MACOSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV
          else
            echo "MACOSX_DEPLOYMENT_TARGET=10.12" >> $GITHUB_ENV
          fi

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            rust-core/target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('rust-core/Cargo.lock') }}

      - name: Validate Rust code (Linux only)
        if: matrix.os == 'ubuntu-latest'
        working-directory: rust-core
        run: |
          cargo fmt --check
          cargo clippy --all-targets --all-features -- -D warnings
          cargo test --verbose

      - name: Build NAPI module
        working-directory: rust-core
        shell: bash
        run: |
          # Install dependencies first
          npm install

          # Build for the target
          echo "Building for target: ${{ matrix.target }}"
          echo "Runner OS: ${{ matrix.os }}"
          echo "Runner architecture: $(uname -m)"
          echo "Node architecture: $(node -p 'process.arch')"

          # Special handling for ARM64 macOS to avoid NAPI linking issues
          if [ "${{ matrix.os }}" = "macos-14" ] && [ "${{ matrix.target }}" = "aarch64-apple-darwin" ]; then
            echo "=== Building ARM64 macOS with special configuration ==="
            
            # Clear any problematic cache
            rm -rf target/aarch64-apple-darwin
            
            # Try building with crypto features first
            echo "Step 1: Attempting build with full features"
            if npx napi build --release --platform; then
              echo "✅ Full feature build successful"
            else
              echo "❌ Full feature build failed, trying without crypto features"
              echo "Step 2: Building without crypto features to avoid ring compilation issues"
              if npx napi build --release --platform --no-default-features; then
                echo "✅ No-crypto build successful"
              else
                echo "❌ Both builds failed, trying with explicit target"
                echo "Step 3: Last resort - explicit target build"
                npx napi build --release --platform --target aarch64-apple-darwin --no-default-features
              fi
            fi
            
          elif [ "${{ matrix.os }}" = "macos-13" ] && [ "${{ matrix.target }}" = "x86_64-apple-darwin" ]; then
            echo "Building x64 natively on x64 runner"
            npx napi build --release --platform
          else
            echo "Building with explicit target: ${{ matrix.target }}"
            npx napi build --release --platform --target ${{ matrix.target }}
          fi

      - name: Verify build output
        working-directory: rust-core
        shell: bash
        run: |
          echo "Checking build artifacts..."
          echo "Files in directory:"
          ls -la *.node *.js *.d.ts 2>/dev/null || echo "No build artifacts found"

          # Check if files exist (cross-platform)
          echo "Build artifacts:"
          if [ -f "index.node" ]; then
            echo "✓ index.node exists ($(du -h index.node 2>/dev/null | cut -f1 || echo 'unknown size'))"
          else
            # Check for platform-specific files
            NODE_FILE=$(ls *.node 2>/dev/null | head -1)
            if [ -n "$NODE_FILE" ]; then
              echo "✓ $NODE_FILE exists ($(du -h $NODE_FILE 2>/dev/null | cut -f1 || echo 'unknown size'))"
            else
              echo "✗ No .node file found"
            fi
          fi
          [ -f "index.js" ] && echo "✓ index.js exists" || echo "✗ index.js missing"  
          [ -f "index.d.ts" ] && echo "✓ index.d.ts exists" || echo "✗ index.d.ts missing"

          # Platform-specific verification
          case "${{ matrix.os }}" in
            "ubuntu-latest")
              echo "Linux binary info:"
              file *.node 2>/dev/null || echo "file command not available"
              ;;
            "macos-13"|"macos-14")
              echo "macOS binary info:"
              if command -v lipo >/dev/null 2>&1; then
                lipo -info *.node 2>/dev/null || echo "lipo info not available"
              elif command -v otool >/dev/null 2>&1; then
                otool -L *.node 2>/dev/null || echo "otool info not available"
              else
                echo "Architecture tools not available"
              fi
              ;;
            "windows-latest")
              echo "Windows binary info:"
              echo "File type: $(file *.node 2>/dev/null || echo 'Windows binary')"
              ;;
          esac

      - name: Generate test PDFs (Linux only)
        if: matrix.os == 'ubuntu-latest'
        working-directory: rust-core
        shell: bash
        run: |
          mkdir -p ../executed/generated-pdfs
          cargo run --bin generate_test_pdfs -- ../executed/generated-pdfs

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.name }}
          path: |
            rust-core/*.node
            rust-core/index.js
            rust-core/index.d.ts

  node-wrapper:
    runs-on: ubuntu-latest
    name: Build and Test Node Wrapper
    needs: build-binaries

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: "10.13.1"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "pnpm"
          cache-dependency-path: "node-wrapper/pnpm-lock.yaml"

      - name: Download Linux binary
        uses: actions/download-artifact@v4
        with:
          name: binary-linux-x64-gnu
          path: rust-core/

      - name: Setup and test
        run: |
          node scripts/setup-execution-env.mjs
          cd node-wrapper
          pnpm install --frozen-lockfile
          pnpm lint
          pnpm test
          pnpm build

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: node-wrapper/coverage
          flags: node-tests
