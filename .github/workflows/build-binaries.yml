name: Build Cross-Platform Binaries

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-binaries:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux-x64-gnu
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            platform: win32-x64-msvc
          - host: macos-13
            target: x86_64-apple-darwin
            platform: darwin-x64
          - host: macos-14
            target: aarch64-apple-darwin
            platform: darwin-arm64

    name: Build ${{ matrix.settings.platform }}
    runs-on: ${{ matrix.settings.host }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: rust-core/package-lock.json

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.settings.target }}

      - name: Setup Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: rust-core

      - name: Install dependencies
        working-directory: rust-core
        run: npm install

      - name: Build native binary
        working-directory: rust-core
        run: npx napi build --release --platform --target ${{ matrix.settings.target }}

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.settings.platform }}
          path: rust-core/index.${{ matrix.settings.platform }}.node
          if-no-files-found: error

  build-package:
    needs: build-binaries
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: node-wrapper/package-lock.json

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Download all binaries
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Copy binaries to rust-core
        run: |
          mkdir -p rust-core
          cp artifacts/binary-linux-x64-gnu/*.node rust-core/index.linux-x64-gnu.node || true
          cp artifacts/binary-win32-x64-msvc/*.node rust-core/index.win32-x64-msvc.node || true
          cp artifacts/binary-darwin-x64/*.node rust-core/index.darwin-x64.node || true
          cp artifacts/binary-darwin-arm64/*.node rust-core/index.darwin-arm64.node || true
          
          # Ensure we have at least the Linux binary as the generic one
          cp rust-core/index.linux-x64-gnu.node rust-core/index.node
          
          # Create the JS wrapper and TypeScript definitions
          cat > rust-core/index.js << 'EOF'
          const { createRequire } = require('module');
          const { fileURLToPath } = require('url');
          const path = require('path');
          
          function getPlatform() {
            const { platform, arch } = process;
            switch (platform) {
              case 'win32':
                return arch === 'x64' ? 'win32-x64-msvc' : `win32-${arch}`;
              case 'darwin':
                return arch === 'arm64' ? 'darwin-arm64' : 'darwin-x64';
              case 'linux':
                return arch === 'x64' ? 'linux-x64-gnu' : `linux-${arch}`;
              default:
                throw new Error(`Unsupported platform: ${platform}-${arch}`);
            }
          }
          
          const platformName = getPlatform();
          const require = createRequire(import.meta.url);
          
          try {
            module.exports = require(`./index.${platformName}.node`);
          } catch (e) {
            try {
              module.exports = require('./index.node');
            } catch (fallbackError) {
              throw new Error(`Failed to load native binary for ${platformName}: ${fallbackError.message}`);
            }
          }
          EOF
          
          cat > rust-core/index.d.ts << 'EOF'
          export interface SigningOptions {
            fontSize?: number;
            color?: string;
            xPosition?: number;
            yPosition?: number;
            pages?: number[];
            position?: string;
            rotation?: number;
            opacity?: number;
          }
          
          export declare function getPageCount(filePath: string): number;
          export declare function signPdfWithOptions(inputPath: string, outputPath: string, signatureText: string, options?: SigningOptions): void;
          export declare function getPdfInfoBeforeSigning(filePath: string): any;
          export declare function getPdfChecksum(filePath: string): string;
          export declare function generateSigningKeyPair(): string;
          export declare function getKeyInfoFromJson(keyData: string): any;
          export declare function signPdfWithKey(inputPath: string, outputPath: string, keyData: string, reason?: string, location?: string, contactInfo?: string): void;
          export declare function verifyPdfSignature(filePath: string): any;
          EOF

      - name: Install dependencies
        working-directory: node-wrapper
        run: pnpm install

      - name: Build package
        working-directory: node-wrapper
        run: pnpm build

      - name: Run tests
        working-directory: node-wrapper
        run: pnpm test

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: solopdf-cli-package
          path: |
            node-wrapper/dist/
            node-wrapper/package.json
            node-wrapper/README.md
