{
  "name": "solopdf-cli",
  "version": "0.0.2",
  "description": "SoloPDF CLI - A fast PDF manipulation tool with Rust core and Node.js wrapper",
  "repository": {
    "type": "git",
    "url": "https://github.com/soloflow-ai/solopdf-cli.git"
  },
  "author": "",
  "license": "ISC",
  "packageManager": "pnpm@10.13.1",
  "engines": {
    "node": ">=18.0.0",
    "pnpm": ">=8.0.0"
  },
  "keywords": [
    "pdf",
    "cli",
    "pdf-manipulation",
    "rust",
    "napi",
    "fast",
    "pdf-tools"
  ],
  "scripts": {
    "build": "pnpm --filter=solopdf-cli build",
    "test": "pnpm --filter=solopdf-cli test",
    "lint": "pnpm --filter=solopdf-cli lint",
    "format": "pnpm --filter=solopdf-cli format",
    "clean": "pnpm --filter=solopdf-cli clean && cd rust-core && cargo clean",
    "build:rust": "cd rust-core && cargo build --release",
    "build:all": "pnpm build:rust && pnpm build",
    "preinstall": "echo '🔧 Installing dependencies...'",
    "postinstall": "echo '✅ Dependencies installed successfully'",
    "pretest": "pnpm build:rust",
    "test:unit": "pnpm --filter=solopdf-cli test:unit",
    "test:integration": "pnpm --filter=solopdf-cli test:integration",
    "test:cli": "pnpm --filter=solopdf-cli test:cli",
    "test:coverage": "pnpm --filter=solopdf-cli test:coverage",
    "test:watch": "pnpm --filter=solopdf-cli test:watch",
    "prelint": "echo '🔍 Running linter...'",
    "lint:fix": "pnpm --filter=solopdf-cli lint:fix",
    "lint:rust": "cd rust-core && cargo clippy --all-targets --all-features -- -D warnings",
    "lint:rust:fix": "cd rust-core && cargo clippy --all-targets --all-features --fix --allow-dirty",
    "preformat": "echo '🎨 Formatting code...'",
    "format:rust": "cd rust-core && cargo fmt",
    "format:rust:check": "cd rust-core && cargo fmt --all -- --check",
    "format:all": "pnpm format:rust && pnpm format",
    "prebuild": "echo '🏗️ Starting build...'",
    "prebuild:all": "echo '🏗️ Starting full build...'",
    "postbuild": "echo '✅ Build completed successfully'",
    "postbuild:all": "echo '🎉 Full build completed successfully'",
    "prepublishOnly": "pnpm validate:publish",
    "postpublish": "echo '🚀 Package published successfully to npm!'",
    "validate": "./scripts/quick-check.sh",
    "validate:quick": "./scripts/quick-check.sh",
    "validate:pre-publish": "./scripts/validate-pre-publish.sh",
    "validate:publish": "./scripts/validate-for-publish.sh",
    "validate:rust": "cd rust-core && cargo fmt --check && cargo clippy --all-targets --all-features -- -D warnings && cargo test",
    "validate:node": "pnpm --filter=solopdf-cli lint && pnpm --filter=solopdf-cli test",
    "validate:ci": "act --job rust-core",
    "validate:ci:full": "act",
    "validate:all": "./scripts/validate-all.sh",
    "dev": "pnpm build:rust && pnpm --filter=solopdf-cli dev",
    "dev:watch": "pnpm --filter=solopdf-cli dev:watch",
    "dev:rust": "cd rust-core && cargo watch -x 'build --release'",
    "setup:env": "node scripts/setup-execution-env.mjs",
    "setup:test": "pnpm setup:env",
    "generate:pdfs": "cd rust-core && cargo run --bin generate_test_pdfs -- ../executed/generated-pdfs",
    "generate:test-pdfs": "pnpm generate:pdfs",
    "publish:dry": "cd node-wrapper && npm publish --dry-run",
    "publish:beta": "cd node-wrapper && npm publish --tag beta",
    "publish:alpha": "cd node-wrapper && npm publish --tag alpha",
    "publish:script": "./scripts/publish.sh",
    "version:patch": "cd node-wrapper && npm version patch && cd .. && git add . && git commit -m 'chore: bump version' && git push --follow-tags",
    "version:minor": "cd node-wrapper && npm version minor && cd .. && git add . && git commit -m 'chore: bump version' && git push --follow-tags",
    "version:major": "cd node-wrapper && npm version major && cd .. && git add . && git commit -m 'chore: bump version' && git push --follow-tags",
    "preversion": "pnpm validate:publish",
    "postversion": "echo '🏷️ Version updated successfully'",
    "start": "pnpm --filter=solopdf-cli start",
    "cli": "pnpm --filter=solopdf-cli cli",
    "husky:install": "husky install",
    "husky:pre-commit": "pnpm validate:quick",
    "husky:pre-push": "pnpm validate:publish"
  },
  "workspaces": [
    "node-wrapper"
  ]
}
